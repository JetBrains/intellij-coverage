plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
}

repositories {
    mavenCentral()
}
sourceSets {
    main.java.srcDirs = []
    test.java.srcDirs = [file('src')]
    jmh.java.srcDirs = [file('jmh')]
}

targetCompatibility = "1.8"
sourceCompatibility = "1.8"

dependencies {
    testImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.0-M1")

    testImplementation(files(project(":tests").sourceSets.test.output))
    testImplementation(project(path: ":instrumentation", configuration: "archives"))
    testImplementation(project(":instrumentation"))
    testImplementation(library_project_asm_all)

    testImplementation("junit:junit:4.13")

    testImplementation(fileTree(project(":benchmarks").file("lib")))

    jmhCompile("org.openjdk.jmh:jmh-core:1.32")
    jmhAnnotationProcessor("org.openjdk.jmh:jmh-generator-annprocess:1.32")
    jmhCompile(project(path: ":instrumentation", configuration: "archives"))
    jmhCompile(project(":"))

    testImplementation("net.bytebuddy:byte-buddy:1.11.12")
    testImplementation("net.bytebuddy:byte-buddy-agent:1.11.12")

    testImplementation("org.jmockit:jmockit:1.49")
}

test {
    filter {
        excludeTestsMatching("testData.*")
    }
}

task runBenchmark(type: JavaExec) {
    configureBenchmark it as JavaExec
}

def configureBenchmark(JavaExec benchmark) {
    benchmark.with {
        dependsOn "jmhClasses"
        main = 'org.openjdk.jmh.Main'
        doFirst {
            classpath = sourceSets.jmh.runtimeClasspath
            args = [
                // fail-on-error
                '-foe', 'true',
                // benchmarks
                'com\\.intellij\\.rt\\.coverage\\.jmh\\.AppendUnloadedBenchmark.*',
            ]
        }
    }
}
