plugins {
  id 'org.jetbrains.kotlin.jvm'
}

sourceSets {
  main.java.srcDirs = []
  test.java.srcDirs 'src'
  test.resources.srcDir 'resources'
}

sourceCompatibility = 1.8
targetCompatibility = testJdkVersion

dependencies {
  testImplementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
  testImplementation("org.jetbrains.kotlin:kotlin-test")
  testImplementation(project(":tests"))

  testImplementation(project(':instrumentation'))
  testImplementation(project(':offline-runtime'))
  testImplementation(project(":reporter"))
  testImplementation(project(":test-kotlin:test-sources"))

  testImplementation('junit:junit:4.13.2')
}

task generateTests(type: JavaExec) {
  group = "verification"
  description = "Generate tests"
  classpath = sourceSets.test.runtimeClasspath
  main = "com.intellij.rt.coverage.TestGenerationKt"
}

def configureTests(Test task) {
  task.with {
    group = "verification"
    if (project.hasProperty("fast.tests") && project["fast.tests"] == "true") {
      jvmArgs("-Dcoverage.run.fast.tests=true")
    }
    if (rootProject.hasProperty("parallel.tests")) {
      maxParallelForks = Math.min(2, Runtime.getRuntime().availableProcessors())
    }
  }
}

test {
  configureTests(it)
}

// These tests should pass for different kotlin compiler versions
task lineStatusTests(type: Test) {
  configureTests(it)
  filter {
    includeTestsMatching("com.intellij.rt.coverage.CoverageRunTest")
    includeTestsMatching("com.intellij.rt.coverage.caseTests.LineSignatureTest")
    includeTestsMatching("com.intellij.rt.coverage.caseTests.OfflineInstrumentationTest")
  }
}
