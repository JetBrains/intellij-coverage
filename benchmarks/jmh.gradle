/*
 * Copyright 2000-2020 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.intellij.rt.coverage.testDiscovery.jmh.ReportReader
import org.codehaus.groovy.runtime.ResourceGroovyMethods

import java.nio.file.Files

repositories {
  mavenCentral()
  maven { url "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies" }
}

ext {
  benchmarkRegexp = ""
  benchmarkMode = "ss"
  becnhmarkForks = 1
  benchmarkIterations = 10
  benchmarkWarmupIterations = 10
  benchmarkProfilers = []
  secondaryMetrics = []
}

task NoAgent(type: JavaExec) {
  configureBenchmark it as JavaExec
}

def configureBenchmark(JavaExec benchmark, Closure<List<String>> jvmArgs = {[]}) {
  benchmark.with {
    group = 'benchmarks'
    dependsOn(":benchmarks:jmhClasses", ":benchmarks:upgradeJmhClasspath")
    main = 'org.openjdk.jmh.Main'
    doFirst {
      classpath = fileTree(project(":benchmarks").upgradeJmhClasspath.outputs.files.singleFile)
      classpath += project(":benchmarks").sourceSets.jmh.output.classesDirs
      args = [
          '-jvmArgs', '-Dfile.encoding=UTF-8',
          // benchmarks
          benchmarkRegexp,
          // report
          '-rf', 'json', '-rff', benchmarkReport(benchmark),
          // mode, see org.openjdk.jmh.annotations.Mode
          '-bm', benchmarkMode,
          // number of forks, measurement iterations, warmups
          '-f', becnhmarkForks, '-i', benchmarkIterations, '-wi', benchmarkWarmupIterations,
          // fail-on-error
          '-foe', 'true',
          // verbosity [SILENT, NORMAL, EXTRA]
          '-v', 'NORMAL'
      ]
      for (String profiler : benchmarkProfilers) {
        args += ['-prof', profiler]
      }
      for (String arg : jvmArgs()) {
        args += ['-jvmArgs', arg]
      }
      benchmarkReport(benchmark).createNewFile()
      Files.deleteIfExists(file('td.ijtc').toPath())
      Files.deleteIfExists(file('coverage.ic').toPath())
    }
  }
}

def benchmarkReport(Task benchmark) {
  file("$benchmark.temporaryDir/${benchmark.name}.json")
}


ext.configureCompareWith = { benchmark, Closure<List<String>> jvmArgs, basicBenchmark ->
  configureBenchmark(benchmark, jvmArgs)
  benchmark.with {
    dependsOn(basicBenchmark)
    doLast {
      def noAgentReport = ResourceGroovyMethods.getText(benchmarkReport(basicBenchmark), 'UTF-8')
      def currentReport = ResourceGroovyMethods.getText(benchmarkReport(benchmark), 'UTF-8')

      project.logger.quiet """Benchmark score:
      $basicBenchmark.name vs $benchmark.name:
      ${ReportReader.readScore(noAgentReport, currentReport, secondaryMetrics)}
      """
    }
  }
}

ext.configureCompare = { benchmark, Closure<List<String>> jvmArgs ->
  configureCompareWith(benchmark, jvmArgs, NoAgent)
}
