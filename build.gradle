/*
 * Copyright 2000-2019 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import jetbrains.sign.GpgSignSignatoryProvider

buildscript {
  repositories {
    maven { url 'https://packages.jetbrains.team/maven/p/jcs/maven' }
  }
  dependencies {
    classpath 'com.jetbrains:jet-sign:38'
  }
}

plugins {
  id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}
apply plugin: 'signing'

private calcVersion() {
  hasProperty("teamcity") ? "1.0.${teamcity["build.number"]}" : ""
}

apply plugin: 'maven-publish'

def trove = rootProject.file('lib/trove.jar')
def asm = rootProject.file('lib/asm-all.jar')

ext.library_project_trove4j = files(trove)
ext.library_project_asm_all = files(asm)

ext.test_discovery_jar_name = 'intellij-test-discovery-agent'
ext.coverage_jar_name = 'intellij-coverage-agent'
ext.offline_jar_name = 'intellij-coverage-offline'
ext.reporter_jar_name = 'intellij-coverage-reporter'

// use this option to test with JDK11
ext.release = rootProject.hasProperty("test.configuration") ? "false" == project["test.configuration"] : true

allprojects {
  version calcVersion()

  repositories {
    mavenCentral()
  }

  if (name.startsWith("kover")) {
    return
  }

  apply plugin: 'java'
  sourceCompatibility = project.release ? 1.5 : 1.6
  targetCompatibility = project.release ? 1.5 : 1.6

  sourceSets {
    main.java.srcDirs 'src'
    test.java.srcDirs = []
  }
}

dependencies {
  compile project(':util')
}

javadoc {
  options.tags = ["noinspection"]
}


ext.repackLibs = copySpec {
  from { zipTree(trove.path) } {
    include(troveClasses())
  }
  from { zipTree(asm.path) } {
    include '**/*.class'
  }
}

// @formatter:off
private static troveClasses() {
  return '**/*.class' // todo: use proguard
  [  'THash'
   , 'Equality'
   , 'THashSet'
   , 'TIntHash'
   , 'TLongHash'
   , 'PrimeFinder'
   , 'TIntHashSet'
   , 'TObjectHash'
   , 'HashFunctions'
   , 'TIntIntHashMap'
   , 'TPrimitiveHash'
   , 'TObjectFunction'
   , 'TIntObjectHashMap'
   , 'TObjectIntHashMap'
   , 'TLongObjectHashMap'
   , 'TIntHashingStrategy'
   , 'TIntObjectProcedure'
   , 'TObjectIntProcedure'
   , 'TLongObjectProcedure'
   , 'TLongHashingStrategy'
   , 'TObjectHashingStrategy'].collect { "org/jetbrains/coverage/**/${it}.class" }
}
// @formatter:on

clean.doFirst {
  delete "dist"
}

apply from: 'artifacts.gradle'
signing {
  sign publishing.publications
  signatories = new GpgSignSignatoryProvider()
}

tasks.withType(Sign) {
  onlyIf { System.getenv("TEAMCITY_VERSION") != null }
}
